{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 #define THRESHOLD 4\
\
typedef Msg\{\
    byte id;\
    byte leaderId;\
    byte members;\
    byte time;\
    byte state;\
    byte messageId;\
\}\
\
typedef EsbPacket \{\
    Msg msg;\
    byte processId;\
    byte data;\
\}\
\
chan P1P2 = [0] of \{EsbPacket\};\
chan P1P3 = [0] of \{EsbPacket\};\
chan P2P1 = [0] of \{EsbPacket\};\
chan P2P3 = [0] of \{EsbPacket\};\
chan P3P1 = [0] of \{EsbPacket\};\
chan P3P2 = [0] of \{EsbPacket\};\
\
int missingMsg[4];\
EsbPacket controlPacket;\
byte commonKnowledge[4];\
byte commonKnowledgeState[4];\
bool transmission_state;\
int myId = 0;\
byte tioa_tdma_state; /* 0 - ELECTING_STATE, 1 - TDMA_STATE*/\
byte globalClock = 0;\
byte currentSlot = 1;\
\
init\{\
    transmission_state = true;\
    myId = 1;  \
    tioa_tdma_state = 0;\
    controlPacket.msg.messageId = 0;\
    controlPacket.data = 0;\
    controlPacket.msg.id = myId;\
    controlPacket.msg.state = tioa_tdma_state;\
    controlPacket.msg.leaderId = myId;\
    controlPacket.msg.members = 1;\
    commonKnowledge[0] = 0;\
    atomic\{run incClock();\}\
\}\
\
proctype incClock()\
\{\
    do\
    :: if\
       :: globalClock < 5 -> atomic\
                              \{ \
                                run esbTimeslot(1);\
                                run esbTimeslot(2);\
                                run esbTimeslot(3);\
                                globalClock++;\
                              \}\
       fi;\
    od;\
\}\
\
proctype send(byte prid)\
\{\
    EsbPacket sendingPacket;\
    sendingPacket.msg.members=prid;\
    sendingPacket.msg.id = prid;\
    sendingPacket.msg.state = tioa_tdma_state;\
    atomic\
    \{\
        if\
        ::  (prid==1 && currentSlot%3 == prid) -> sendingPacket.msg.time = currentSlot;sendingPacket.processId=2;P1P2!sendingPacket;sendingPacket.processId=3;P1P3!sendingPacket;\
        ::  (prid==2 && currentSlot%3 == prid) -> sendingPacket.msg.time = currentSlot;sendingPacket.processId=1;P2P1!sendingPacket;sendingPacket.processId=3;P2P3!sendingPacket;\
        ::  (prid==3 && (currentSlot%3 == 0)) -> sendingPacket.msg.time = currentSlot;sendingPacket.processId=1;P3P1!sendingPacket;sendingPacket.processId=2;P3P2!sendingPacket;\
        fi;\
    \}\
\}\
\
active proctype receive()\
\{\
    EsbPacket msg;\
    do\
    :: skip ->\
    if\
    ::  P1P2?msg -> run onReceive(msg);\
    ::  P1P3?msg -> run onReceive(msg);\
    ::  P2P1?msg -> run onReceive(msg);\
    ::  P2P3?msg -> run onReceive(msg);\
    ::  P3P1?msg -> run onReceive(msg);\
    ::  P3P2?msg -> run onReceive(msg);\
    fi;\
    od;\
\}\
\
proctype onReceive(EsbPacket receivedPacket)\
\{\
    atomic\
    \{\
        if\
        ::  (controlPacket.msg.members < receivedPacket.msg.members) -> controlPacket.msg.members = receivedPacket.msg.members;\
        ::  else -> skip;\
        fi;\
        if\
        ::  (commonKnowledge[receivedPacket.processId] < controlPacket.msg.members) -> commonKnowledge[receivedPacket.processId]=controlPacket.msg.members;\
        ::  else -> skip;\
        fi;\
        if\
        ::  (commonKnowledge[receivedPacket.msg.id] < receivedPacket.msg.members) -> commonKnowledge[receivedPacket.msg.id] = receivedPacket.msg.members;  \
        ::  else -> skip;\
        fi;\
        commonKnowledgeState[receivedPacket.msg.id] = receivedPacket.msg.state;\
        int loopVar = 3;\
        int numOfNodes = 0;\
        do\
        :: loopVar > 0 -> \
                if\
                ::  commonKnowledge[loopVar] == controlPacket.msg.members -> numOfNodes++;\
                ::  else -> skip;\
                fi;\
                loopVar--;\
        ::  loopVar == 0 -> break;\
        od;\
        if\
        ::  numOfNodes==controlPacket.msg.members -> tioa_tdma_state = 1;\
        ::  else -> tioa_tdma_state = 0;\
        fi;\
    \}\
\}\
\
proctype esbTimeslot(byte processId)\
\{\
    atomic\
    \{\
        if\
        ::  transmission_state == true ->\
            controlPacket.msg.time = currentSlot;\
            controlPacket.msg.state = tioa_tdma_state;\
            if\
            ::  tioa_tdma_state == 0 ->\
                    run send(processId);\
                    if\
                    ::  controlPacket.msg.members == processId -> tioa_tdma_state = 1;\
                    ::  else -> run failuredetector(tioa_tdma_state);\
                    fi;\
            ::  tioa_tdma_state == 1 ->\
                    if\
                    ::  (currentSlot%3 == processId) -> run send(processId);\
                    :: else -> run failuredetector(tioa_tdma_state);\
                    fi;\
            fi;\
        ::  else -> skip;\
        fi;\
        currentSlot++;    \
    \}\
\}\
\
proctype failuredetector(byte state)\
\{\
    int loopV = 3;\
    do\
    :: loopV > 0 -> \
            if\
            ::  controlPacket.msg.members == loopV -> \
                if\
                ::  state == commonKnowledgeState[loopV] -> missingMsg[loopV]++;\
                ::  else -> skip;\
                fi;\
                if\
                ::  missingMsg[loopV] > THRESHOLD -> controlPacket.msg.members = controlPacket.msg.members - 1; missingMsg[loopV] = 0; commonKnowledgeState[loopV] = 0;\
                ::  else -> skip;\
                fi;\
            ::  else -> skip;\
            fi;\
            loopV--;\
    ::  loopV == 0 -> break;\
    od;\
\}\
\
never \{\
    do\
    ::  skip\
    ::  tioa_tdma_state == 1 -> break\
    od;\
accept: do\
        ::  tioa_tdma_state =1\
        od\
\}\
}